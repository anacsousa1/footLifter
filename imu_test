# ######################################################################################################################
# ## imu_test.py
# ## Description: testing the IMU
# ## Library needed: imu.py, stimulator.py
# ## Python interpreter: Anaconda 2.2.0 (python 2.7)
# ## Author: Ana Carolina Cardoso de Sousa
# ## Email: anacsousa1@gmail.com
# ## Created: May 29th 2015
# ######################################################################################################################

__author__ = 'Ana'

# Importing...
import serial
import imu
import time
import math

# Greetings
print "Hello!\n"

# Ports and addresses
portIMU = 'COM4'        # in windows, verify "Manage Devices"
addressIMU = 1          # the device must have a stick informing it

# Open ports
print "...Trying to connect IMU" + str(addressIMU) + " to port " + portIMU + "."
serialPortIMU = serial.Serial(portIMU, timeout=1, writeTimeout=1, baudrate=115200)

if not serialPortIMU.isOpen(): #verify if it is already open
    serialPortIMU.open()
print "...Done it!\n"

# Construct objects
device1 = imu.IMU(serialPortIMU, addressIMU)

# Getting the info
print '\n...Calibrating.'

calibrationError = 10
while calibrationError > 0.1:
    device1.setEulerToYXZ()
    device1.calibrate()
    device1.tare()
    cal = device1.getEulerAngles()
    cal = cal.split(',', 6)
    calibrationError = float(cal[3]) + float(cal[4]) + float(cal[5])
print "...Done it!\n"

# Wait until the user press the 'Start' button
print '...Whenever you\'re ready, press button 1 (the left one)!'
while not (device1.checkButtons() == 1):
    pass

# Do it n times
while not (device1.checkButtons() == 2):
    angles = device1.getEulerAngles()   # get angles
    angles = angles.split(',', 6)       # convert to list

    if len(angles) == 6:                # if we connect correctly with the device
        pitch = float(angles[4])
        if pitch >= 0:
            pitch = math.degrees(pitch)
        else:
            pitch = 360 + math.degrees(pitch)
        print str(pitch)

    time.sleep(0.5)

# Bye
serialPortIMU.close()                   # close port
print 'Bye, bye.'
